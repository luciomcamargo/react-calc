{"ast":null,"code":"'use strict';\n\nvar object = require('../../utils/object');\n\nvar array = require('../../utils/array');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n   *\n   * Syntax:\n   *\n   *     math.squeeze(x)\n   *\n   * Examples:\n   *\n   *     math.squeeze([3])           // returns 3\n   *     math.squeeze([[3]])         // returns 3\n   *\n   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)\n   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)\n   *\n   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)\n   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)\n   *\n   *     // only inner and outer dimensions are removed\n   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *\n   * See also:\n   *\n   *     subset\n   *\n   * @param {Matrix | Array} x      Matrix to be squeezed\n   * @return {Matrix | Array} Squeezed matrix\n   */\n\n  var squeeze = typed('squeeze', {\n    'Array': function Array(x) {\n      return array.squeeze(object.clone(x));\n    },\n    'Matrix': function Matrix(x) {\n      var res = array.squeeze(x.toArray()); // FIXME: return the same type of matrix as the input\n\n      return Array.isArray(res) ? matrix(res) : res;\n    },\n    'any': function any(x) {\n      // scalar\n      return object.clone(x);\n    }\n  });\n  squeeze.toTex = undefined; // use default template\n\n  return squeeze;\n}\n\nexports.name = 'squeeze';\nexports.factory = factory;","map":null,"metadata":{},"sourceType":"script"}